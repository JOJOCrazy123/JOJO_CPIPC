import argparse
import re

import torch
from flask import Flask, jsonify, request
from transformers import T5ForConditionalGeneration, T5Tokenizer


class Text2Triple:
    def __init__(self, model_path: str, max_length: int = 512, device: str = "cuda"):
        self.tokenizer = T5Tokenizer.from_pretrained(model_path)
        self.model = T5ForConditionalGeneration.from_pretrained(model_path).to(device)
        self.max_length = max_length

    def generate_triple(self, text: str, device: str = "cuda", return_json=False):
        """
        Generates a triple for a given input text using the provided model and tokenizer.

        Args:
            text (str): The input text.
            device (str): The device to run the model on ('cuda' or 'cpu').

        Returns:
            str: The decoded triple generated by the model.
        """
        input_encodings = self.tokenizer(
            text,
            max_length=self.max_length,
            padding="max_length",
            truncation=True,
            return_tensors="pt",
        )
        input_ids = input_encodings["input_ids"].to(device)

        with torch.no_grad():
            generated_ids = self.model.generate(
                input_ids,
                max_length=512,
                num_beams=4,
                early_stopping=True,
                length_penalty=0.6,
                use_cache=True,
            )

        triple = self.tokenizer.batch_decode(generated_ids, skip_special_tokens=True)[0]

        if return_json:
            return self.parse_triples(triple)
        return triple

    def parse_triples(self, triple_string):
        pattern = re.compile(r"\(S>\s*(.*?)\|\s*P>\s*(.*?)\|\s*O>\s*(.*?)\)")
        matches = pattern.findall(triple_string)
        if matches:
            return [
                {
                    "subject": match[0].strip(),
                    "predicate": match[1].strip(),
                    "object": match[2].strip(),
                }
                for match in matches
            ]
        return {"error": "Invalid triple format"}


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="Text to Triple Service")
    parser.add_argument(
        "--mode",
        choices=["test", "console", "API"],
        default="test",
        help="Mode to run the application: 'test', 'console', or 'API'",
    )
    args = parser.parse_args()

    # model_path = "./text2triple_model/best_model_202507_step238000"
    model_path = "Yi-Eaaa/text2triple_202507"
    text2triple = Text2Triple(model_path)

    if args.mode == "test":
        # input_text = "The capital of France is Paris."
        # input_text = "The founding time of hospitals?"
        input_text = "how many 3-point attempts did steve nash average per game in seasons he made the 50-40-90 club?"
        input_text = "what company in the dow jones is the best performer today?"
        generated_triple = text2triple.generate_triple(input_text)
        print(f"Input Text: {input_text}")
        print(f"Generated Triple: {generated_triple}")
    elif args.mode == "console":
        # Terminal Interaction
        print("Welcome! (INPUT 'exit' TO EXIT)")
        while True:
            input_text = input("Query: ")
            if input_text.lower() == "exit":
                print("Exit.")
                break
            generated_triple = text2triple.generate_triple(input_text)
            print(f"Generated Triple: {generated_triple}")
    elif args.mode == "API":
        app = Flask(__name__)

        @app.route("/generate_triple", methods=["GET"])
        def generate_triple():
            input_text = request.args.get("query")
            if not input_text:
                return jsonify({"error": "Missing 'query' in request"}), 400

            generated_triple = text2triple.generate_triple(
                text=input_text, return_json=True
            )
            return jsonify(generated_triple)

        port = 20257
        print(f"Service is running on port {port}...")
        app.run(host="0.0.0.0", port=port)
    else:
        raise ValueError(
            f"Invalid mode {args.mode}. Please choose from ['test','console','API']."
        )
